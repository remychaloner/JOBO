#include <Wire.h>
#include <LiquidCrystal_I2C.h>

LiquidCrystal_I2C lcd(0x27, 16, 2);  // set the LCD I2C address to 0x27 and 16x2 display size

//PROCESS TIMES
unsigned long process_times[][2] = {
  {0, 15},  // Process step 1
  {0, 5},   // Process step 2
  {0, 2},   // Process step 3
  {3, 15},   // Process step 4
  {0, 15},  // Process step 5
  {0, 5},   // Process step 6
  {0, 2},   // Process step 7
  {3, 15}   // Process step 8 
};



// LCD FLASH AND PROGRAM SETTINGS
bool showProcessing = false;
const long flashinterval = 1000;
int lcdprogram = 0;

// PIN SETTINGS
const int MOTOR_CONTROL_FWD = 2;
const int MOTOR_CONTROL_REV = 3;
const int BUTTON_PIN = 7;
const int BUZZER = 4;

//TIMERS ETC
unsigned long buzzer_length = 3000;
unsigned long rotate_interval = 1000;
unsigned long current_millis = 0;
unsigned long previous_rotate_millis = 0;
unsigned long previousMillis = 0;
unsigned long currentMillis = 0;

// STATE SETTINGS
int button_state = 0;
int program = 0;
int rotate_program = 0;
int motor_state = LOW;
int motor_state2 = HIGH;

void setup() {
  //PIN SETTINGS
  pinMode(MOTOR_CONTROL_FWD, OUTPUT);
  pinMode(MOTOR_CONTROL_REV, OUTPUT);
  pinMode(BUTTON_PIN, INPUT_PULLUP);
  pinMode(BUZZER, OUTPUT);
//LCD SETTINGS  
  lcd.init();
  lcd.backlight();
}

void loop() {
//LCD DISPLAY PROGRAM SETTINGS
if (lcdprogram == 0){
  lcd.setCursor(4, 0);
  lcd.print("PRE-BATH");
  lcd.setCursor(5, 1);
  lcd.print("START");}
else if (lcdprogram == 1){
  lcd.setCursor(3, 0);
  lcd.print("RINSE");
  lcd.setCursor(5, 1);
  lcd.print("START");}
else if (lcdprogram == 2){
    lcd.setCursor(3,0);
    lcd.print("DEVELOPER");
    lcd.setCursor(5,1);
    lcd.print("START");}
else if (lcdprogram == 3){
    lcd.setCursor(5,0);
    lcd.print("BLEACH");
    lcd.setCursor(5,1);
    lcd.print("START");}
else if (lcdprogram == 4){
    lcd.setCursor(5,0);
    lcd.print("RINSE");
    lcd.setCursor(5,1);
    lcd.print("START");}
else if (lcdprogram == 5){
    lcd.setCursor(5,0);
    lcd.print("FIXER");
    lcd.setCursor(5,1);
    lcd.print("START");}
else if (lcdprogram == 6){
    lcd.setCursor(5,0);
    lcd.print("RINSE");
    lcd.setCursor(5,1);
    lcd.print("START");}
else if (lcdprogram == 7){
    lcd.setCursor(5,0);
    lcd.print("RINSE");
    lcd.setCursor(5,1);
    lcd.print("START");}
else if (lcdprogram == 8){
    lcd.setCursor(6,0);
    lcd.print("STAB");
    lcd.setCursor(5,1);
    lcd.print("START");
    }

  
  
    
  button_state = digitalRead(BUTTON_PIN);
// PROGRAM ZERO
  if (button_state == LOW && program == 0) {
    
        current_millis = millis();
//MAIN TIMER PROGRAM ZERO
    while (millis() < current_millis + ((process_times[0][0] * 60000) + (process_times[0][1] * 1000))) {
      unsigned long current_rotate_millis = millis();

    currentMillis = millis();
    if (currentMillis - previousMillis >= flashinterval) {
      previousMillis = currentMillis;
      showProcessing = !showProcessing;
      if (showProcessing) {
        lcd.setCursor(3, 1);
        lcd.print("PROCESSING");
      } else {
        lcd.setCursor(3, 1);
        lcd.print("            ");
      }
    }
//ROTATE TIMER
      if (current_rotate_millis - previous_rotate_millis > rotate_interval) {
        previous_rotate_millis = current_rotate_millis;
        motor_state = !motor_state;
        motor_state2 = !motor_state2;
        digitalWrite(MOTOR_CONTROL_FWD, motor_state);
        digitalWrite(MOTOR_CONTROL_REV, motor_state2);
      }
//BUZZER TIMER 
      if (millis() >= current_millis + ((process_times[0][0] * 60000) + (process_times[0][1] * 1000)) - buzzer_length) {
        digitalWrite(BUZZER, HIGH);
      } else {
        digitalWrite(BUZZER, LOW);
      }
    }
//RESET TO ZERO
    digitalWrite(MOTOR_CONTROL_FWD, LOW);
    digitalWrite(MOTOR_CONTROL_REV, LOW);
    digitalWrite(BUZZER, LOW);
    lcd.clear();
    // NEXT PROGRAM
  program = 1;
  lcdprogram = 1;
    
    
  }
  else if (button_state == LOW && program == 1) {
    current_millis = millis();

    while (millis() < current_millis + ((process_times[1][0] * 60000) + (process_times[1][1] * 1000))) {
      unsigned long current_rotate_millis = millis();

      currentMillis = millis();
    if (currentMillis - previousMillis >= flashinterval) {
      previousMillis = currentMillis;
      showProcessing = !showProcessing;
      if (showProcessing) {
        lcd.setCursor(3, 1);
        lcd.print("PROCESSING");
      } else {
        lcd.setCursor(3, 1);
        lcd.print("            ");
      }
    }

      if (current_rotate_millis - previous_rotate_millis > rotate_interval) {
        previous_rotate_millis = current_rotate_millis;
        motor_state = !motor_state;
        motor_state2 = !motor_state2;
        digitalWrite(MOTOR_CONTROL_FWD, motor_state);
        digitalWrite(MOTOR_CONTROL_REV, motor_state2);
      }

      if (millis() >= current_millis + ((process_times[1][0] * 60000) + (process_times[1][1] * 1000)) - buzzer_length) {
        digitalWrite(BUZZER, HIGH);
      } else {
        digitalWrite(BUZZER, LOW);
      }
    }

    digitalWrite(MOTOR_CONTROL_FWD, LOW);
    digitalWrite(MOTOR_CONTROL_REV, LOW);
    digitalWrite(BUZZER, LOW);
lcd.clear();
program = 2;
lcdprogram = 2;

    
  }
  else if (button_state == LOW && program == 2) {
    current_millis = millis();

    while (millis() < current_millis + ((process_times[2][0] * 60000) + (process_times[2][1] * 1000))) {
      unsigned long current_rotate_millis = millis();

      currentMillis = millis();
    if (currentMillis - previousMillis >= flashinterval) {
      previousMillis = currentMillis;
      showProcessing = !showProcessing;
      if (showProcessing) {
        lcd.setCursor(3, 1);
        lcd.print("PROCESSING");
      } else {
        lcd.setCursor(3, 1);
        lcd.print("            ");
      }
    }

      if (current_rotate_millis - previous_rotate_millis > rotate_interval) {
        previous_rotate_millis = current_rotate_millis;
        motor_state = !motor_state;
        motor_state2 = !motor_state2;
        digitalWrite(MOTOR_CONTROL_FWD, motor_state);
        digitalWrite(MOTOR_CONTROL_REV, motor_state2);
      }

      if (millis() >= current_millis + ((process_times[2][0] * 60000) + (process_times[2][1] * 1000)) - buzzer_length) {
        digitalWrite(BUZZER, HIGH);
      } else {
        digitalWrite(BUZZER, LOW);
      }
    }

    digitalWrite(MOTOR_CONTROL_FWD, LOW);
    digitalWrite(MOTOR_CONTROL_REV, LOW);
    digitalWrite(BUZZER, LOW);
lcd.clear();
program = 3;
lcdprogram = 3;

    
  }
  else if (button_state == LOW && program == 3) {
    current_millis = millis();

    while (millis() < current_millis + ((process_times[3][0] * 60000) + (process_times[3][1] * 1000))) {
      unsigned long current_rotate_millis = millis();

      currentMillis = millis();
    if (currentMillis - previousMillis >= flashinterval) {
      previousMillis = currentMillis;
      showProcessing = !showProcessing;
      if (showProcessing) {
        lcd.setCursor(3, 1);
        lcd.print("PROCESSING");
      } else {
        lcd.setCursor(3, 1);
        lcd.print("            ");
      }
    }

      if (current_rotate_millis - previous_rotate_millis > rotate_interval) {
        previous_rotate_millis = current_rotate_millis;
        motor_state = !motor_state;
        motor_state2 = !motor_state2;
        digitalWrite(MOTOR_CONTROL_FWD, motor_state);
        digitalWrite(MOTOR_CONTROL_REV, motor_state2);
      }

      if (millis() >= current_millis + ((process_times[3][0] * 60000) + (process_times[3][1] * 1000)) - buzzer_length) {
        digitalWrite(BUZZER, HIGH);
      } else {
        digitalWrite(BUZZER, LOW);
      }
    }

    digitalWrite(MOTOR_CONTROL_FWD, LOW);
    digitalWrite(MOTOR_CONTROL_REV, LOW);
    digitalWrite(BUZZER, LOW);
lcd.clear();
program = 4;
lcdprogram = 4;

    
  }
  else if (button_state == LOW && program == 4) {
    current_millis = millis();

    while (millis() < current_millis + ((process_times[4][0] * 60000) + (process_times[4][1] * 1000))) {
      unsigned long current_rotate_millis = millis();

      currentMillis = millis();
    if (currentMillis - previousMillis >= flashinterval) {
      previousMillis = currentMillis;
      showProcessing = !showProcessing;
      if (showProcessing) {
        lcd.setCursor(3, 1);
        lcd.print("PROCESSING");
      } else {
        lcd.setCursor(3, 1);
        lcd.print("            ");
      }
    }

      if (current_rotate_millis - previous_rotate_millis > rotate_interval) {
        previous_rotate_millis = current_rotate_millis;
        motor_state = !motor_state;
        motor_state2 = !motor_state2;
        digitalWrite(MOTOR_CONTROL_FWD, motor_state);
        digitalWrite(MOTOR_CONTROL_REV, motor_state2);
      }

      if (millis() >= current_millis + ((process_times[4][0] * 60000) + (process_times[4][1] * 1000)) - buzzer_length) {
        digitalWrite(BUZZER, HIGH);
      } else {
        digitalWrite(BUZZER, LOW);
      }
    }

    digitalWrite(MOTOR_CONTROL_FWD, LOW);
    digitalWrite(MOTOR_CONTROL_REV, LOW);
    digitalWrite(BUZZER, LOW);
lcd.clear();
program = 5;
lcdprogram = 5;

    
  }
  else if (button_state == LOW && program == 5) {
    current_millis = millis();

    while (millis() < current_millis + ((process_times[5][0] * 60000) + (process_times[5][1] * 1000))) {
      unsigned long current_rotate_millis = millis();

      currentMillis = millis();
    if (currentMillis - previousMillis >= flashinterval) {
      previousMillis = currentMillis;
      showProcessing = !showProcessing;
      if (showProcessing) {
        lcd.setCursor(3, 1);
        lcd.print("PROCESSING");
      } else {
        lcd.setCursor(3, 1);
        lcd.print("            ");
      }
    }

      if (current_rotate_millis - previous_rotate_millis > rotate_interval) {
        previous_rotate_millis = current_rotate_millis;
        motor_state = !motor_state;
        motor_state2 = !motor_state2;
        digitalWrite(MOTOR_CONTROL_FWD, motor_state);
        digitalWrite(MOTOR_CONTROL_REV, motor_state2);
      }

      if (millis() >= current_millis + ((process_times[5][0] * 60000) + (process_times[5][1] * 1000)) - buzzer_length) {
        digitalWrite(BUZZER, HIGH);
      } else {
        digitalWrite(BUZZER, LOW);
      }
    }

    digitalWrite(MOTOR_CONTROL_FWD, LOW);
    digitalWrite(MOTOR_CONTROL_REV, LOW);
    digitalWrite(BUZZER, LOW);
lcd.clear();
program = 6;
lcdprogram = 6;

    
  }
  else if (button_state == LOW && program == 6) {
    current_millis = millis();

    while (millis() < current_millis + ((process_times[6][0] * 60000) + (process_times[6][1] * 1000))) {
      unsigned long current_rotate_millis = millis();

      currentMillis = millis();
    if (currentMillis - previousMillis >= flashinterval) {
      previousMillis = currentMillis;
      showProcessing = !showProcessing;
      if (showProcessing) {
        lcd.setCursor(3, 1);
        lcd.print("PROCESSING");
      } else {
        lcd.setCursor(3, 1);
        lcd.print("            ");
      }
    }

      if (current_rotate_millis - previous_rotate_millis > rotate_interval) {
        previous_rotate_millis = current_rotate_millis;
        motor_state = !motor_state;
        motor_state2 = !motor_state2;
        digitalWrite(MOTOR_CONTROL_FWD, motor_state);
        digitalWrite(MOTOR_CONTROL_REV, motor_state2);
      }

      if (millis() >= current_millis + ((process_times[6][0] * 60000) + (process_times[6][1] * 1000)) - buzzer_length) {
        digitalWrite(BUZZER, HIGH);
      } else {
        digitalWrite(BUZZER, LOW);
      }
    }

    digitalWrite(MOTOR_CONTROL_FWD, LOW);
    digitalWrite(MOTOR_CONTROL_REV, LOW);
    digitalWrite(BUZZER, LOW);
lcd.clear();
program = 7;
lcdprogram = 7;

    
  }
  else if (button_state == LOW && program == 7) {
    current_millis = millis();

    while (millis() < current_millis + ((process_times[7][0] * 60000) + (process_times[7][1] * 1000))) {
      unsigned long current_rotate_millis = millis();

      currentMillis = millis();
    if (currentMillis - previousMillis >= flashinterval) {
      previousMillis = currentMillis;
      showProcessing = !showProcessing;
      if (showProcessing) {
        lcd.setCursor(3, 1);
        lcd.print("PROCESSING");
      } else {
        lcd.setCursor(3, 1);
        lcd.print("            ");
      }
    }

      if (current_rotate_millis - previous_rotate_millis > rotate_interval) {
        previous_rotate_millis = current_rotate_millis;
        motor_state = !motor_state;
        motor_state2 = !motor_state2;
        digitalWrite(MOTOR_CONTROL_FWD, motor_state);
        digitalWrite(MOTOR_CONTROL_REV, motor_state2);
      }

      if (millis() >= current_millis + ((process_times[7][0] * 60000) + (process_times[7][1] * 1000)) - buzzer_length) {
        digitalWrite(BUZZER, HIGH);
      } else {
        digitalWrite(BUZZER, LOW);
      }
    }

    digitalWrite(MOTOR_CONTROL_FWD, LOW);
    digitalWrite(MOTOR_CONTROL_REV, LOW);
    digitalWrite(BUZZER, LOW);
lcd.clear();
program = 8;
lcdprogram = 8;

    
  }
  else if (button_state == LOW && program == 8) {
    current_millis = millis();

    while (millis() < current_millis + ((process_times[8][0] * 60000) + (process_times[8][1] * 1000))) {
      unsigned long current_rotate_millis = millis();

      currentMillis = millis();
    if (currentMillis - previousMillis >= flashinterval) {
      previousMillis = currentMillis;
      showProcessing = !showProcessing;
      if (showProcessing) {
        lcd.setCursor(3, 1);
        lcd.print("PROCESSING");
      } else {
        lcd.setCursor(3, 1);
        lcd.print("            ");
      }
    }

      if (current_rotate_millis - previous_rotate_millis > rotate_interval) {
        previous_rotate_millis = current_rotate_millis;
        motor_state = !motor_state;
        motor_state2 = !motor_state2;
        digitalWrite(MOTOR_CONTROL_FWD, motor_state);
        digitalWrite(MOTOR_CONTROL_REV, motor_state2);
      }

      if (millis() >= current_millis + ((process_times[8][0] * 60000) + (process_times[8][1] * 1000)) - buzzer_length) {
        digitalWrite(BUZZER, HIGH);
      } else {
        digitalWrite(BUZZER, LOW);
      }
    }

    digitalWrite(MOTOR_CONTROL_FWD, LOW);
    digitalWrite(MOTOR_CONTROL_REV, LOW);
    digitalWrite(BUZZER, LOW);
lcd.clear();
program = 0;
lcdprogram = 0;

    
  }
}
